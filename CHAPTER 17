----------------------------------------
-- HC17T1: Severity Data Type and Semigroup Instance
----------------------------------------
data Severity = Low | Medium | High | Critical
  deriving (Show, Eq, Ord)

instance Semigroup Severity where
  (<>) = max

----------------------------------------
-- HC17T2: Min and Max Newtypes with Semigroup
----------------------------------------
newtype Min a = Min { getMin :: a } deriving (Show)
newtype Max a = Max { getMax :: a } deriving (Show)

instance Ord a => Semigroup (Min a) where
  (Min x) <> (Min y) = Min (min x y)

instance Ord a => Semigroup (Max a) where
  (Max x) <> (Max y) = Max (max x y)

----------------------------------------
-- HC17T3: Monoid Instance for Severity
----------------------------------------
instance Monoid Severity where
  mempty = Low

----------------------------------------
-- HC17T4: Monoid Instance for Sum Newtype
----------------------------------------
newtype Sum a = Sum { getSum :: a } deriving (Show)

instance Num a => Semigroup (Sum a) where
  (Sum x) <> (Sum y) = Sum (x + y)

instance Num a => Monoid (Sum a) where
  mempty = Sum 0

----------------------------------------
-- HC17T5: combineLists Function
----------------------------------------
combineLists :: [Int] -> [Int] -> [Int]
combineLists = (<>)

----------------------------------------
-- HC17T6: maxSeverity Function
----------------------------------------
maxSeverity :: [Severity] -> Severity
maxSeverity = mconcat

----------------------------------------
-- HC17T7: multiplyProducts Function
----------------------------------------
newtype Product a = Product { getProduct :: a } deriving (Show)

instance Num a => Semigroup (Product a) where
  (Product x) <> (Product y) = Product (x * y)

instance Num a => Monoid (Product a) where
  mempty = Product 1

multiplyProducts :: Num a => [Product a] -> Product a
multiplyProducts = mconcat

----------------------------------------
-- HC17T8: foldWithSemigroup Function
----------------------------------------
foldWithSemigroup :: Semigroup a => [a] -> a
foldWithSemigroup = foldr1 (<>)

----------------------------------------
-- HC17T9: Config Data Type and Semigroup Instance
----------------------------------------
data Config = Config
  { loggingLevel :: Int
  , timeout :: Int
  , retries :: Int
  } deriving (Show)

instance Semigroup Config where
  (Config l1 t1 r1) <> (Config l2 t2 r2) =
    Config (max l1 l2) (min t1 t2) (max r1 r2)

----------------------------------------
-- HC17T10: Monoid Instance for Config
----------------------------------------
instance Monoid Config where
  mempty = Config 0 maxBound 0
